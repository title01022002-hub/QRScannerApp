name: Build and Release QRScanner AppImage

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 40

    steps:
    - name: Checkout repo
      uses: actions/checkout@v4

    - name: Prepare apt packages (ImageMagick, jq, libs)
      run: |
        sudo apt-get update
        sudo apt-get install -y wget jq imagemagick libgl1 libglib2.0-0 libsm6 libxrender1 libxext6

    - name: Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'

    - name: Install Python deps & PyInstaller
      run: |
        python -m pip install --upgrade pip
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
        pip install pyinstaller

    - name: Build one-file binary with PyInstaller
      run: |
        set -euo pipefail
        # clean previous builds if any
        rm -rf build dist __pycache__ *.spec || true
        pyinstaller --onefile --name QRScanner main.py
        ls -lh dist || true

    - name: Download latest appimagetool
      run: |
        set -euo pipefail
        # fetch the latest release asset url for appimagetool-x86_64.AppImage using GitHub API
        APPIMAGE_URL=$(wget -qO- https://api.github.com/repos/AppImage/AppImageKit/releases/latest \
          | jq -r '.assets[] | select(.name | test("appimagetool.*x86_64.AppImage$")) | .browser_download_url' | head -n1)
        if [ -z "$APPIMAGE_URL" ]; then
          echo "ERROR: could not find appimagetool download URL"; exit 1
        fi
        echo "Downloading appimagetool from: $APPIMAGE_URL"
        wget -q "$APPIMAGE_URL" -O appimagetool
        chmod +x appimagetool
        sudo mv appimagetool /usr/local/bin/appimagetool
        /usr/local/bin/appimagetool --version || true

    - name: Prepare AppDir (AppRun, .desktop, icon, binary)
      run: |
        set -euo pipefail
        rm -rf AppDir || true
        mkdir -p AppDir/usr/bin
        mkdir -p AppDir/usr/share/applications
        mkdir -p AppDir/usr/share/icons/hicolor/256x256/apps

        # copy the built binary
        cp dist/QRScanner AppDir/usr/bin/QRScanner
        chmod +x AppDir/usr/bin/QRScanner

        # AppRun wrapper (top-level)
        cat > AppDir/AppRun <<'EOF'
#!/bin/bash
HERE="$(dirname "$(readlink -f "$0")")"
export PATH="$HERE/usr/bin:$PATH"
exec "$HERE/usr/bin/QRScanner" "$@"
EOF
        chmod +x AppDir/AppRun

        # Desktop entry (top-level and in applications)
        cat > AppDir/QRScanner.desktop <<'EOF'
[Desktop Entry]
Type=Application
Name=QRScanner
Exec=QRScanner
Icon=QRScanner
Categories=Utility;
EOF
        cp AppDir/QRScanner.desktop AppDir/usr/share/applications/

        # Create icon using ImageMagick (256x256 PNG)
        convert -size 256x256 xc:white -gravity center -pointsize 72 -annotate 0 "QR" QRScanner.png
        cp QRScanner.png AppDir/QRScanner.png
        cp QRScanner.png AppDir/usr/share/icons/hicolor/256x256/apps/QRScanner.png

    - name: Build AppImage
      run: |
        set -euo pipefail
        # Build AppImage; output will be QRScanner-x86_64.AppImage
        appimagetool AppDir QRScanner-x86_64.AppImage
        ls -lh QRScanner-x86_64.AppImage

    - name: Upload AppImage artifact
      uses: actions/upload-artifact@v4
      with:
        name: QRScanner-AppImage
        path: QRScanner-x86_64.AppImage

    - name: Create GitHub Release and attach AppImage
      uses: softprops/action-gh-release@v1
      with:
        tag_name: v1.0.${{ github.run_number }}
        name: QRScanner v1.0.${{ github.run_number }}
        files: QRScanner-x86_64.AppImage
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
