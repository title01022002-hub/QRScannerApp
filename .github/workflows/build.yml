name: Build Python AppImage (Advanced)

on:
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        arch: [x86_64, aarch64]  # Multi-architecture

    steps:
      # 1. Checkout code
      - name: Checkout repository
        uses: actions/checkout@v4

      # 2. Setup Python
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      # 3. Install dependencies
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pyinstaller
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

      # 4. Build executable with PyInstaller
      - name: Build executable
        run: |
          pyinstaller --onefile --name myapp myapp.py --icon=myapp.png \
            --add-data "data:./data" \
            --add-data "config:./config" \
            --clean

      # 5. Prepare AppDir
      - name: Prepare AppDir
        run: |
          mkdir -p MyApp.AppDir/usr/bin
          cp dist/myapp MyApp.AppDir/usr/bin/
          cp myapp.png MyApp.AppDir/
          # Create AppRun
          echo '#!/bin/bash' > MyApp.AppDir/AppRun
          echo 'HERE="$(dirname "$(readlink -f "${0}")")"' >> MyApp.AppDir/AppRun
          echo '"$HERE/usr/bin/myapp" "$@"' >> MyApp.AppDir/AppRun
          chmod +x MyApp.AppDir/AppRun
          # Create .desktop
          cat <<EOT > MyApp.AppDir/myapp.desktop
[Desktop Entry]
Name=MyApp
Exec=myapp
Icon=myapp
Type=Application
Categories=Utility;
EOT

      # 6. Install AppImageTool
      - name: Install AppImageTool
        run: |
          wget https://github.com/AppImage/AppImageKit/releases/download/continuous/appimagetool-x86_64.AppImage
          chmod +x appimagetool-x86_64.AppImage

      # 7. Build AppImage
      - name: Build AppImage
        run: |
          ARCH=${{ matrix.arch }}
          echo "Building AppImage for $ARCH"
          if [ "$ARCH" = "aarch64" ]; then
            # Cross-build ARM64 using Docker or qemu (Ubuntu supports binfmt)
            sudo apt-get update && sudo apt-get install -y qemu-user-static
            docker run --rm -v $PWD:/project -w /project --platform linux/arm64 ubuntu \
              bash -c "./appimagetool-x86_64.AppImage MyApp.AppDir MyApp-aarch64.AppImage"
          else
            ./appimagetool-x86_64.AppImage MyApp.AppDir MyApp-x86_64.AppImage
          fi

      # 8. Upload artifacts
      - name: Upload AppImage
        uses: actions/upload-artifact@v4
        with:
          name: MyApp-AppImage
          path: MyApp-*.AppImage
